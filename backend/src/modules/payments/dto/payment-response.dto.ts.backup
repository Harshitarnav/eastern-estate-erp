import { Payment } from '../entities/payment.entity';

export class PaymentResponseDto {
  id: string;
  paymentCode: string;
  bookingId: string;
  customerId: string;
  paymentType: string;
  paymentMethod: string;
  amount: number;
  paymentDate: string;
  bankName?: string;
  transactionReference?: string;
  chequeNumber?: string;
  chequeDate?: string;
  upiId?: string;
  status: string;
  receiptNumber?: string;
  booking?: any;
  customer?: any;

  static fromEntity(payment: Payment): PaymentResponseDto {
    const dto = new PaymentResponseDto();
    dto.id = payment.id || '';
    dto.paymentCode = payment.paymentCode || '';
    dto.bookingId = payment.bookingId || '';
    dto.customerId = payment.customerId || '';
    dto.paymentType = payment.paymentType || '';
    dto.paymentMethod = payment.paymentMethod || '';
    dto.amount = Number(payment.amount) || 0;
    
    // Safe date handling
    if (payment.paymentDate) {
      try {
        const date = new Date(payment.paymentDate);
        dto.paymentDate = date.toISOString().split('T')[0];
      } catch {
        dto.paymentDate = new Date().toISOString().split('T')[0];
      }
    } else {
      dto.paymentDate = new Date().toISOString().split('T')[0];
    }
    
    dto.bankName = payment.bankName || '';
    dto.transactionReference = payment.transactionReference || '';
    dto.chequeNumber = payment.chequeNumber || '';
    
    // Safe cheque date handling
    if (payment.chequeDate) {
      try {
        const date = new Date(payment.chequeDate);
        dto.chequeDate = date.toISOString().split('T')[0];
      } catch {
        dto.chequeDate = '';
      }
    } else {
      dto.chequeDate = '';
    }
    
    dto.upiId = payment.upiId || '';
    dto.status = payment.status || 'PENDING';
    dto.receiptNumber = payment.receiptNumber || '';
    
    if (payment.booking) {
      dto.booking = payment.booking;
    }
    if (payment.customer) {
      dto.customer = payment.customer;
    }

    return dto;
  }

  static fromEntities(payments: Payment[]): PaymentResponseDto[] {
    return payments.map((payment) => this.fromEntity(payment));
  }
}

export interface PaginatedPaymentsResponse {
  data: PaymentResponseDto[];
  meta: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}
