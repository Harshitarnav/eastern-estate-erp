import { LeadsService } from './leads.service';
import { PriorityService } from './priority.service';
import { CreateLeadDto, UpdateLeadDto, QueryLeadDto, LeadResponseDto, PaginatedLeadsResponse } from './dto';
export declare class LeadsController {
    private readonly leadsService;
    private readonly priorityService;
    constructor(leadsService: LeadsService, priorityService: PriorityService);
    create(createLeadDto: CreateLeadDto): Promise<LeadResponseDto>;
    findAll(query: QueryLeadDto): Promise<PaginatedLeadsResponse>;
    getStatistics(): Promise<{
        total: number;
        newLeads: number;
        contacted: number;
        qualified: number;
        won: number;
        lost: number;
        conversionRate: number;
    }>;
    getPrioritizedLeads(userId: string): Promise<{
        priorityInfo: import("./priority.service").PriorityScore;
        id: string;
        leadCode: string;
        fullName: string;
        email: string;
        phoneNumber: string;
        alternatePhone: string;
        address: string;
        city: string;
        state: string;
        status: import("./entities/lead.entity").LeadStatus;
        source: import("./entities/lead.entity").LeadSource;
        priority: import("./entities/lead.entity").LeadPriority;
        interestedPropertyTypes: string;
        requirementType: import("./entities/lead.entity").CustomerRequirementType;
        propertyPreference: import("./entities/lead.entity").PropertyPreference;
        budgetMin: number;
        budgetMax: number;
        preferredLocation: string;
        requirements: string[];
        tentativePurchaseTimeframe: string;
        expectedPurchaseDate: Date;
        lastContactedAt: Date;
        nextFollowUpDate: Date;
        followUpNotes: string;
        lastFollowUpFeedback: string;
        totalFollowUps: number;
        sendFollowUpReminder: boolean;
        reminderSent: boolean;
        reminderSentAt: Date;
        assignedTo: string;
        assignedAt: Date;
        assignedUser: import("../users/entities/user.entity").User;
        isQualified: boolean;
        isFirstTimeBuyer: boolean;
        hasExistingProperty: boolean;
        needsHomeLoan: boolean;
        hasApprovedLoan: boolean;
        currentOccupation: string;
        annualIncome: number;
        campaignName: string;
        utmSource: string;
        utmMedium: string;
        utmCampaign: string;
        tags: string[];
        referredBy: string;
        referralName: string;
        referralPhone: string;
        hasSiteVisit: boolean;
        siteVisitStatus: import("./entities/lead.entity").SiteVisitStatus;
        siteVisitTime: string;
        siteVisitFeedback: string;
        totalSiteVisits: number;
        lastSiteVisitDate: Date;
        totalCalls: number;
        totalEmails: number;
        totalMeetings: number;
        lastCallDate: Date;
        lastEmailDate: Date;
        lastMeetingDate: Date;
        convertedToCustomerId: string;
        convertedAt: Date;
        lostReason: string;
        lostAt: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        createdBy: string;
        updatedBy: string;
    }[]>;
    getTodaysTasks(userId: string): Promise<import("./priority.service").PrioritizedTask[]>;
    getSmartTips(userId: string): Promise<{
        tips: string[];
        timestamp: Date;
    }>;
    getMyLeads(userId: string): Promise<LeadResponseDto[]>;
    getDueFollowUps(userId?: string): Promise<LeadResponseDto[]>;
    findOne(id: string): Promise<LeadResponseDto>;
    update(id: string, updateLeadDto: UpdateLeadDto): Promise<LeadResponseDto>;
    assignLead(id: string, userId: string): Promise<LeadResponseDto>;
    updateStatus(id: string, status: string, notes?: string): Promise<LeadResponseDto>;
    remove(id: string): Promise<void>;
    bulkAssignLeads(bulkAssignDto: any): Promise<{
        assigned: number;
    }>;
    checkDuplicateLead(checkDto: any): Promise<import("./dto").DuplicateLeadResponseDto>;
    getAgentDashboardStats(agentId: string, query: any): Promise<import("./dto").AgentDashboardStatsDto>;
    getAdminDashboardStats(query: any): Promise<import("./dto").AdminDashboardStatsDto>;
    getTeamDashboardStats(gmId: string, query: any): Promise<import("./dto").TeamDashboardStatsDto>;
    importLeads(importDto: any): Promise<import("./dto").ImportLeadsResultDto>;
}
