import { Repository, DataSource } from 'typeorm';
import { Booking } from './entities/booking.entity';
import { CreateBookingDto, UpdateBookingDto, QueryBookingDto, BookingResponseDto, PaginatedBookingsResponse } from './dto';
import { Flat } from '../flats/entities/flat.entity';
import { Property } from '../properties/entities/property.entity';
import { Tower } from '../towers/entities/tower.entity';
import { Customer } from '../customers/entities/customer.entity';
import { PaymentsService } from '../payments/payments.service';
import { PaymentScheduleService } from '../payments/payment-schedule.service';
import { EmailService } from '../notifications/email.service';
export declare class BookingsService {
    private bookingsRepository;
    private flatsRepository;
    private propertiesRepository;
    private towersRepository;
    private customersRepository;
    private paymentsService;
    private paymentScheduleService;
    private emailService;
    private dataSource;
    private readonly logger;
    constructor(bookingsRepository: Repository<Booking>, flatsRepository: Repository<Flat>, propertiesRepository: Repository<Property>, towersRepository: Repository<Tower>, customersRepository: Repository<Customer>, paymentsService: PaymentsService, paymentScheduleService: PaymentScheduleService, emailService: EmailService, dataSource: DataSource);
    create(createBookingDto: CreateBookingDto): Promise<BookingResponseDto>;
    private sendBookingNotifications;
    findAll(query: QueryBookingDto): Promise<PaginatedBookingsResponse>;
    findOne(id: string): Promise<BookingResponseDto>;
    update(id: string, updateBookingDto: UpdateBookingDto): Promise<BookingResponseDto>;
    remove(id: string): Promise<void>;
    cancelBooking(id: string, reason: string, refundAmount?: number): Promise<BookingResponseDto>;
    getStatistics(): Promise<{
        total: number;
        tokenPaid: number;
        agreementPending: number;
        agreementSigned: number;
        confirmed: number;
        completed: number;
        cancelled: number;
        totalRevenue: number;
        totalPaid: number;
        totalBalance: number;
        withHomeLoan: number;
        totalLoanAmount: number;
        collectionRate: number;
    }>;
}
